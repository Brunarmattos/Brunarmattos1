{
  "hash": "10d828248d502617580f4c0ac41effe6",
  "result": {
    "markdown": "---\ntitle: \"Exercício comparação de genomas\"\nauthor: \"Bruna Rodrigues de Mattos\"\ndate: \"2022-06-30\"\ncategories: [news, code, analysis]\nimage: \"imagem-capa-genoma.png\"\n---\n\n\nPretende-se comparar duas sequências de DNA: **SARS-CoV-2** identificado na cidade de Wuhan (China) e o Virus da **Influenza A** identificado na California (US).\n\nO DNA é uma molécula presente em todos os seres vivos, que é responsável por armazenar as caracterı́sticas hereditárias. Ela é composta por sequências de nucleotı́deos, que podem ser de quatro tipos: Adenina (**A**), Timina (**T**), Citosina (**C**) ou Guanina (**G**).\n\nNeste estudo de caso, queremos avaliar se estruturas com funções parecidas de organismos diferentes têm diferenças. Para isso vamos avaliar a quantidade de pares de nucleotı́deos.\n\nOs dados utilizados para este estudo referem-se a sequências de DNA disponı́veis nos seguintes links: \\[SARS-CoV-2 Wuhan-Hu-1\\](https://www.ncbi.nlm.nih.gov/nuccore/NC_045512.2?report=fasta) e \\[Virus da Influenza A (California/07/2009(H1N1))\\](https://www.ncbi.nlm.nih.gov/nuccore/CY266194.1?report=fasta).\n\nPara comparar as duas estruturas requere-se um mapa de calor (Heatmap) que permita realizar a comparação dos pares de nucleotı́deos. Comente sobre os resultados encontrados.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n### Influenza\n\nNo primeiro passo, iremos ler as bases de dados, começando pela de influenza.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninfluenza = open('sequence-influenza.txt').read() # Ler o arquivo\n\ninfluenza = influenza.replace(\"\\n\",\"\") # retirar os \"\\n\"\npares_influenza = [\n  influenza[i] + influenza[i + 1] for i in range(len(influenza) - 1)\n]\n```\n:::\n\n\nApós isso, iremos ler listar as possíveis combinações de genes.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom itertools import permutations\n\ngenes = ['A', 'T', 'C', 'G']\n\ncombinations_genes = list(permutations(genes, 2))\n\n\ntodos_genes = [''.join(i) for i in combinations_genes]\ntodos_genes.extend(['AA', 'TT', 'CC', 'GG'])\n\ntodos_genes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['AT', 'AC', 'AG', 'TA', 'TC', 'TG', 'CA', 'CT', 'CG', 'GA', 'GT', 'GC', 'AA', 'TT', 'CC', 'GG']\n```\n:::\n:::\n\n\nIremos contabilizar todos os pares de genomas na nossa base, tendo como critério dos os possíveis pares que podem existir e que foram apresentados no passo anterior.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngenes_dict = {i:pares_influenza.count(i) for i in todos_genes}\ngenes_dict\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'AT': 118, 'AC': 75, 'AG': 144, 'TA': 49, 'TC': 82, 'TG': 117, 'CA': 128, 'CT': 68, 'CG': 37, 'GA': 160, 'GT': 62, 'GC': 77, 'AA': 174, 'TT': 71, 'CC': 69, 'GG': 109}\n```\n:::\n:::\n\n\nOrdenando nossas combinações possíveis\n\n\n::: {.cell}\n\n```{.python .cell-code}\nordered_dict = sorted(genes_dict.items(), key=lambda x: x[0], reverse=False)\n\nordered_dict = {i[0]:i[1] for i in ordered_dict}\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmatriz_influenza = np.array(list(ordered_dict.values())).reshape(4,4)\n```\n:::\n\n\nE, por fim, plotaremos o gráfico de calor.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.imshow(matriz_influenza, cmap = 'Blues', origin=\"lower\")\nplt.xlabel('Índice da linha'); plt.ylabel('Índice da coluna')\nplt.xticks((0,1,2,3),['A','C', 'G', 'T'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n([<matplotlib.axis.XTick object at 0x0000028722280670>, <matplotlib.axis.XTick object at 0x0000028722280640>, <matplotlib.axis.XTick object at 0x0000028722268280>, <matplotlib.axis.XTick object at 0x00000287222D72B0>], [Text(0, 0, 'A'), Text(1, 0, 'C'), Text(2, 0, 'G'), Text(3, 0, 'T')])\n```\n:::\n\n```{.python .cell-code}\nplt.yticks([0,1,2,3],['A', \"C\", \"G\", \"T\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n([<matplotlib.axis.YTick object at 0x00000287222808E0>, <matplotlib.axis.YTick object at 0x0000028722280DF0>, <matplotlib.axis.YTick object at 0x00000287222802E0>, <matplotlib.axis.YTick object at 0x00000287222D7550>], [Text(0, 0, 'A'), Text(0, 1, 'C'), Text(0, 2, 'G'), Text(0, 3, 'T')])\n```\n:::\n\n```{.python .cell-code}\nplt.title(\"Influenza A\")\nplt.colorbar()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<matplotlib.colorbar.Colorbar object at 0x000002872236F2B0>\n```\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Covid\n\nAgora replicaremos o mesmo algoritmo para a base de covid.\n\nIniciando com a leitura do arquivo\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncovid = open('sequence-covid.txt').read() # Ler o arquivo\n\ncovid = covid.replace(\"\\n\",\"\") # retirar os \"\\n\"\npares_covid = [\n  covid[i] + covid[i + 1] for i in range(len(covid) - 1)\n]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngenes_dict = {i:pares_covid.count(i) for i in todos_genes}\n\ngenes_dict\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'AT': 2308, 'AC': 2023, 'AG': 1742, 'TA': 2377, 'TC': 1413, 'TG': 2589, 'CA': 2084, 'CT': 2081, 'CG': 439, 'GA': 1612, 'GT': 1990, 'GC': 1168, 'AA': 2880, 'TT': 3215, 'CC': 888, 'GG': 1093}\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nordered_dict = sorted(genes_dict.items(), key=lambda x: x[0], reverse=False)\n\nordered_dict = {i[0]:i[1] for i in ordered_dict}\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmatriz_covid = np.array(list(ordered_dict.values())).reshape(4,4)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n\nplt.imshow(matriz_covid, cmap = 'Blues', origin=\"lower\")\nplt.xlabel('Índice da linha'); plt.ylabel('Índice da coluna')\nplt.xticks((0,1,2,3),['A','C', 'G', 'T'])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n([<matplotlib.axis.XTick object at 0x000002872237B250>, <matplotlib.axis.XTick object at 0x000002872237BB80>, <matplotlib.axis.XTick object at 0x000002872234E5E0>, <matplotlib.axis.XTick object at 0x0000028723A22970>], [Text(0, 0, 'A'), Text(1, 0, 'C'), Text(2, 0, 'G'), Text(3, 0, 'T')])\n```\n:::\n\n```{.python .cell-code}\nplt.yticks([0,1,2,3],['A', \"C\", \"G\", \"T\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n([<matplotlib.axis.YTick object at 0x00000287222BD130>, <matplotlib.axis.YTick object at 0x000002872236FD60>, <matplotlib.axis.YTick object at 0x0000028723A36130>, <matplotlib.axis.YTick object at 0x0000028723A36760>], [Text(0, 0, 'A'), Text(0, 1, 'C'), Text(0, 2, 'G'), Text(0, 3, 'T')])\n```\n:::\n\n```{.python .cell-code}\nplt.title(\"Covid\")\nplt.colorbar()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<matplotlib.colorbar.Colorbar object at 0x0000028727994F10>\n```\n:::\n\n```{.python .cell-code}\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index1_files/figure-html/unnamed-chunk-13-3.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}